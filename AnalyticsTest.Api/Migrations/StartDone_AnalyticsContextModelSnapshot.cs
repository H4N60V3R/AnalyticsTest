// <auto-generated />
using System;
using AnalyticsTest.Api.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AnalyticsTest.Api.Migrations
{
    [DbContext(typeof(StartDone_AnalyticsContext))]
    partial class StartDone_AnalyticsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AnalyticsTest.Api.Models.TblCode", b =>
                {
                    b.Property<int>("CodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Code_ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CodeCgid")
                        .HasColumnName("Code_CGID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CodeCreateDatetime")
                        .HasColumnName("Code_CreateDatetime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CodeDisplay")
                        .IsRequired()
                        .HasColumnName("Code_Display")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<bool>("CodeIsActive")
                        .HasColumnName("Code_IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("CodeName")
                        .IsRequired()
                        .HasColumnName("Code_Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.HasKey("CodeId");

                    b.HasIndex("CodeCgid");

                    b.ToTable("Tbl_Code");
                });

            modelBuilder.Entity("AnalyticsTest.Api.Models.TblCodeGroup", b =>
                {
                    b.Property<int>("CgId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CG_ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CgCreateDateTime")
                        .HasColumnName("CG_CreateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CgDisplay")
                        .IsRequired()
                        .HasColumnName("CG_Display")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("CgName")
                        .IsRequired()
                        .HasColumnName("CG_Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.HasKey("CgId");

                    b.ToTable("Tbl_CodeGroup");
                });

            modelBuilder.Entity("AnalyticsTest.Api.Models.TblIpaddress", b =>
                {
                    b.Property<int>("IaId")
                        .HasColumnName("IA_ID")
                        .HasColumnType("int");

                    b.Property<int>("IaCityId")
                        .HasColumnName("IA_CityID")
                        .HasColumnType("int");

                    b.Property<int>("IaContryId")
                        .HasColumnName("IA_ContryID")
                        .HasColumnType("int");

                    b.Property<string>("IaIp")
                        .IsRequired()
                        .HasColumnName("IA_IP")
                        .HasColumnType("nchar(50)")
                        .IsFixedLength(true)
                        .HasMaxLength(50);

                    b.Property<string>("IaIsp")
                        .IsRequired()
                        .HasColumnName("IA_ISP")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.HasKey("IaId");

                    b.ToTable("Tbl_IPAddress");
                });

            modelBuilder.Entity("AnalyticsTest.Api.Models.TblLog", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Log_ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("LogDateTime")
                        .HasColumnName("Log_DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LogRaw")
                        .IsRequired()
                        .HasColumnName("Log_Raw")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LogId");

                    b.ToTable("Tbl_Log");
                });

            modelBuilder.Entity("AnalyticsTest.Api.Models.TblPageVisit", b =>
                {
                    b.Property<int>("PvId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PV_ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("PvBrowerCodeId")
                        .HasColumnName("PV_BrowerCodeID")
                        .HasColumnType("int");

                    b.Property<string>("PvBrowerInfo")
                        .HasColumnName("PV_BrowerInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PvDateTime")
                        .HasColumnName("PV_DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("PvLogId")
                        .HasColumnName("PV_LogID")
                        .HasColumnType("int");

                    b.Property<string>("PvPageUrl")
                        .IsRequired()
                        .HasColumnName("PV_PageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PvPlatformCodeId")
                        .HasColumnName("PV_PlatformCodeID")
                        .HasColumnType("int");

                    b.Property<string>("PvReferrer")
                        .HasColumnName("PV_Referrer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PvUserAgent")
                        .HasColumnName("PV_UserAgent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PvVisitorId")
                        .HasColumnName("PV_VisitorID")
                        .HasColumnType("int");

                    b.Property<string>("PvWindowSize")
                        .HasColumnName("PV_WindowSize")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("PvId");

                    b.HasIndex("PvBrowerCodeId");

                    b.HasIndex("PvLogId");

                    b.HasIndex("PvPlatformCodeId");

                    b.HasIndex("PvVisitorId");

                    b.ToTable("Tbl_PageVisit");
                });

            modelBuilder.Entity("AnalyticsTest.Api.Models.TblRole", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Role_ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RoleDisplay")
                        .IsRequired()
                        .HasColumnName("Role_Display")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<bool>("RoleIsDelete")
                        .HasColumnName("Role_IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnName("Role_Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.HasKey("RoleId");

                    b.ToTable("Tbl_Role");
                });

            modelBuilder.Entity("AnalyticsTest.Api.Models.TblSession", b =>
                {
                    b.Property<int>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Session_ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("SessionGuid")
                        .HasColumnName("Session_Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SessionLastDateTime")
                        .HasColumnName("Session_LastDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SessionStartDateTime")
                        .HasColumnName("Session_StartDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("SessionVisitorId")
                        .HasColumnName("Session_VisitorID")
                        .HasColumnType("int");

                    b.HasKey("SessionId");

                    b.HasIndex("SessionVisitorId");

                    b.ToTable("Tbl_Session");
                });

            modelBuilder.Entity("AnalyticsTest.Api.Models.TblUser", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("User_ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("UserCreateDate")
                        .HasColumnName("User_CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserFamily")
                        .IsRequired()
                        .HasColumnName("User_Family")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<bool>("UserIsDelete")
                        .HasColumnName("User_IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("UserMobile")
                        .IsRequired()
                        .HasColumnName("User_Mobile")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<DateTime>("UserModifyDate")
                        .HasColumnName("User_ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnName("User_Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("UserPasswordHash")
                        .IsRequired()
                        .HasColumnName("User_PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserPasswordSalt")
                        .IsRequired()
                        .HasColumnName("User_PasswordSalt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserRoleId")
                        .HasColumnName("User_RoleID")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("UserRoleId");

                    b.ToTable("Tbl_User");
                });

            modelBuilder.Entity("AnalyticsTest.Api.Models.TblVisitor", b =>
                {
                    b.Property<int>("VisitorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Visitor_ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("VisitorCreateDateTime")
                        .HasColumnName("Visitor_CreateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("VisitorIpid")
                        .HasColumnName("Visitor_IPID")
                        .HasColumnType("int");

                    b.Property<int>("VisitorTypeCodeId")
                        .HasColumnName("Visitor_TypeCodeID")
                        .HasColumnType("int");

                    b.HasKey("VisitorId");

                    b.HasIndex("VisitorIpid");

                    b.HasIndex("VisitorTypeCodeId");

                    b.ToTable("Tbl_Visitor");
                });

            modelBuilder.Entity("AnalyticsTest.Api.Models.TblCode", b =>
                {
                    b.HasOne("AnalyticsTest.Api.Models.TblCodeGroup", "CodeCg")
                        .WithMany("TblCode")
                        .HasForeignKey("CodeCgid")
                        .HasConstraintName("FK_CodeGroup")
                        .IsRequired();
                });

            modelBuilder.Entity("AnalyticsTest.Api.Models.TblPageVisit", b =>
                {
                    b.HasOne("AnalyticsTest.Api.Models.TblCode", "PvBrowerCode")
                        .WithMany("TblPageVisitPvBrowerCode")
                        .HasForeignKey("PvBrowerCodeId")
                        .HasConstraintName("FK_BrowerCode");

                    b.HasOne("AnalyticsTest.Api.Models.TblLog", "PvLog")
                        .WithMany("TblPageVisit")
                        .HasForeignKey("PvLogId")
                        .HasConstraintName("FK_Log")
                        .IsRequired();

                    b.HasOne("AnalyticsTest.Api.Models.TblCode", "PvPlatformCode")
                        .WithMany("TblPageVisitPvPlatformCode")
                        .HasForeignKey("PvPlatformCodeId")
                        .HasConstraintName("FK_PlatformCode");

                    b.HasOne("AnalyticsTest.Api.Models.TblVisitor", "PvVisitor")
                        .WithMany("TblPageVisit")
                        .HasForeignKey("PvVisitorId")
                        .HasConstraintName("FK_Visitor")
                        .IsRequired();
                });

            modelBuilder.Entity("AnalyticsTest.Api.Models.TblSession", b =>
                {
                    b.HasOne("AnalyticsTest.Api.Models.TblVisitor", "SessionVisitor")
                        .WithMany("TblSession")
                        .HasForeignKey("SessionVisitorId")
                        .HasConstraintName("FK_Tbl_Session_Tbl_Visitor")
                        .IsRequired();
                });

            modelBuilder.Entity("AnalyticsTest.Api.Models.TblUser", b =>
                {
                    b.HasOne("AnalyticsTest.Api.Models.TblRole", "UserRole")
                        .WithMany("TblUser")
                        .HasForeignKey("UserRoleId")
                        .HasConstraintName("FK_Role")
                        .IsRequired();
                });

            modelBuilder.Entity("AnalyticsTest.Api.Models.TblVisitor", b =>
                {
                    b.HasOne("AnalyticsTest.Api.Models.TblIpaddress", "VisitorIp")
                        .WithMany("TblVisitor")
                        .HasForeignKey("VisitorIpid")
                        .HasConstraintName("FK_IP")
                        .IsRequired();

                    b.HasOne("AnalyticsTest.Api.Models.TblCode", "VisitorTypeCode")
                        .WithMany("TblVisitor")
                        .HasForeignKey("VisitorTypeCodeId")
                        .HasConstraintName("FK_VisitorCode")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
